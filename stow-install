#!/usr/bin/env python3
import argparse
import os
import shutil
import subprocess
import tempfile
import os.path as osp
import cgi
import tarfile
import urllib.request


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--name', type=str, required=True)
    parser.add_argument('--source', type=str)
    parser.add_argument('--target', type=str)
    parser.add_argument('--stow-dir', type=str)
    parser.add_argument('--bootstrap', action='store_true')
    parser.add_argument('configure_args', nargs=argparse.REMAINDER)

    args = parser.parse_args()
    stow_dir = args.stow_dir if args.stow_dir is not None else os.environ['STOW_DIR']

    if osp.exists(osp.join(stow_dir, args.name)):
        raise FileExistsError('Package already exists in stow directory')

    target = args.target if args.target is not None else osp.join(os.environ['HOME'], '.local')
    source = args.source if args.source is not None else os.getcwd()
    install(args.name, source, target, stow_dir, args.configure_args, args.bootstrap)


def install(name, source, target, stow_dir, configure_args, bootstrap):
    enter_source_dir(name, source)

    with tempfile.TemporaryDirectory(dir=stow_dir) as temp_destdir:
        if osp.isfile('CMakeLists.txt'):
            compile_cmake(configure_args, target, temp_destdir)
        elif osp.isfile('configure'):
            compile_autotools(configure_args, target, temp_destdir)
        elif osp.isfile('meson.build'):
            compile_meson(configure_args, target, temp_destdir)

        shutil.move(osp.join(temp_destdir, osp.relpath(target, '/')), osp.join(stow_dir, name))

    stow_bin = osp.join(stow_dir, name, 'bin', 'stow') if bootstrap else 'stow'
    subprocess.run([stow_bin, name, '--target=' + target])


def enter_source_dir(name, source):
    if source.startswith('http'):
        source = download_file(source)

    if osp.isdir(source):
        os.chdir(source)
    elif osp.isfile(source):
        if not osp.isabs(source):
            source = osp.abspath(source)
        os.chdir(osp.dirname(source))
        source = extract_source(name, source)
        os.chdir(source)


def extract_source(name, source):
    extraction_target = f'src_{name}'
    os.makedirs(extraction_target, exist_ok=True)
    if source.endswith('.tar.gz'):
        with tarfile.open(source) as tar:
            first_member = tar.next()
            source_dir_in_archive = first_member.path.split('/')[0]
            tar.extractall(extraction_target)

    return osp.join(extraction_target, source_dir_in_archive)


def compile_autotools(configure_args, target, temp_destdir):
    subprocess.run(['./configure', '--prefix=' + target] + configure_args)
    subprocess.run(['make', '-j', str(len(os.sched_getaffinity(0)))])
    subprocess.run(['make', 'install', 'DESTDIR=' + temp_destdir])


def compile_cmake(configure_args, target, temp_destdir):
    os.makedirs('build', exist_ok=True)
    os.chdir('build')
    subprocess.run(['cmake', '-DCMAKE_INSTALL_PREFIX=' + target] + configure_args + ['..'])
    subprocess.run(['make', '-j', str(len(os.sched_getaffinity(0)))])
    subprocess.run(['make', 'install', 'DESTDIR=' + temp_destdir])
    os.chdir('')


def compile_meson(configure_args, target, temp_destdir):
    os.makedirs('build', exist_ok=True)
    os.chdir('build')
    subprocess.run(['meson', 'build'] + configure_args)
    subprocess.run(['meson', 'configure', '-D', 'prefix=' + target])
    subprocess.run(['ninja', '-C', 'build'])
    subprocess.run(['DESTDIR=' + temp_destdir, 'ninja', '-C', 'build', 'install'])
    os.chdir('')


def extract_tar_from_url(name, response):
    extraction_target = f'src_{name}'
    os.makedirs(extraction_target, exist_ok=True)

    with tarfile.open(fileobj=response, mode='r|gz') as tar:
        first_member = tar.next()
        source_dir_in_archive = first_member.path.split('/')[0]
        tar.extractall(extraction_target)

    return osp.join(extraction_target, source_dir_in_archive)


def download_file(url):
    with urllib.request.urlopen(url) as response:
        try:
            content_disposition = response.info()['Content-Disposition']
            filename = cgi.parse_header(content_disposition)[1]['filename']
        except Exception:
            filename = osp.basename(url)

        if filename.endswith('.tar.gz'):
            return extract_tar_from_url(osp.splitext(filename)[0], response)

        with open(filename, 'wb') as out_file:
            shutil.copyfileobj(response, out_file)

    return filename


if __name__ == '__main__':
    main()
